Figure_List <- Comparison_Function(
cross_data,
cross_matching,
input_df,
"Interactive",
List,
factor_levels_values
)
Figure_List$Plot <- Figure_List$Plot %>%
layout(
autosize = T,
width = 16 * 65,
height = 10 * 55,
paper_bgcolor = "lightblue",
xaxis = list(
tickfont = list(size = 15),
titlefont = list(size = 20)
),
yaxis = list(
tickfont = list(size = 15),
titlefont = list(size = 20)
)
)
if (factor == factor_list_custom[1]) {
widget_list[[length(widget_list) + 1]] <- Figure_List$Sankey
Title_vec <- c(Title_vec, str_c(metric, " inclusion criteria"))
}
widget_list[[length(widget_list) + 1]] <- htmltools::tagList(Figure_List$Plot)
Title_vec <- c(Title_vec, str_c(metric, ":", factor))
}
}
}
}
# htmltools::tagList(widget_list)
# This is stupidly verbose, but...
# Spent too many hours trying to make this work in a loop
# It just wont...
# same for if statements
# this is so annoying and illogical
i <- 1
widgets_numb <- length(widget_list)
# Change the tiles to the long text version
# maybe add the definitions of the metric and factor at the bottom of the graphs
# add a caption about the lines being drawn
# add the Sankey plots in between the different factors (probably quite hard)
Line_meaning <- "Lines are drawn between paired crosses that are identical for the other essential factors, apart from the respective X-axis factor."
pander::pandoc.header(Title_vec[i], level = 2)
htmltools::div(widget_list[i],
style = "height: 575px", fig.align='center')
widget_list[i]
widget_list[2]
i
pander::pandoc.header(Title_vec[i], level = 2)
htmltools::div(widget_list[i],
style = "height: 575px", fig.align='center')
pander::pandoc.header(Title_vec[i], level = 2)
widget_list[i]
pander::pandoc.p(str_c("X-axis: ", definitions[Factor_vec[i]], ""))
### loop over the metrics, and factors
### then produce figures for each
widget_list <- list()
Title_vec <- character()
Metric_vec <- character()
Factor_vec <- character()
for (metric in names(factor_levels_values)) {
if (length(unique(cross_data[, metric])) > 1) {
#& metric != "Drive_Allele_Inheritance_With_Controls") {
# Here we copy the references values before we change them
input_df <- input_df_ref
# If the metric is somatic phenotype, we modify the factors
if (metric == "Nuclease_Induced_Phenotype") {
factor_list_custom <- c("ID",
"Cross",
F2_Somatic_Phenotype_Factors,
names(cross_matching[cross_matching_selected]))
factor_list_custom <-
factor_list_custom[!(factor_list_custom %in% "D1.Sex")]
} else {
factor_list_custom <- c("ID", "Cross",
names(cross_matching[cross_matching_selected]))
}
for (factor in factor_list_custom) {
if (length(unique(cross_data[cross_data[, metric] != "Null", factor])) > 1) {
Factor_vec <- c(Factor_vec, factor)
Metric_vec <- c(Metric_vec, metric)
# Y axis metric
input_df$metric <- metric
# X axis metric
input_df$B_server <- factor
Figure_List <- Comparison_Function(
cross_data,
cross_matching,
input_df,
"Interactive",
List,
factor_levels_values
)
Figure_List$Plot <- Figure_List$Plot %>%
layout(
autosize = T,
width = 16 * 65,
height = 10 * 55,
paper_bgcolor = "lightblue",
xaxis = list(
tickfont = list(size = 15),
titlefont = list(size = 20)
),
yaxis = list(
tickfont = list(size = 15),
titlefont = list(size = 20)
)
)
if (factor == factor_list_custom[1]) {
widget_list[[length(widget_list) + 1]] <- Figure_List$Sankey
Title_vec <- c(Title_vec, str_c(metric, " inclusion criteria"))
}
widget_list[[length(widget_list) + 1]] <- htmltools::div(htmltools::tagList(Figure_List$Plot), style = "height: 575px", fig.align='center')
Title_vec <- c(Title_vec, str_c(metric, ":", factor))
}
}
}
}
# htmltools::tagList(widget_list)
# This is stupidly verbose, but...
# Spent too many hours trying to make this work in a loop
# It just wont...
# same for if statements
# this is so annoying and illogical
i <- 1
widgets_numb <- length(widget_list)
# Change the tiles to the long text version
# maybe add the definitions of the metric and factor at the bottom of the graphs
# add a caption about the lines being drawn
# add the Sankey plots in between the different factors (probably quite hard)
Line_meaning <- "Lines are drawn between paired crosses that are identical for the other essential factors, apart from the respective X-axis factor."
pander::pandoc.header(Title_vec[i], level = 2)
widget_list[i]
pander::pandoc.p(str_c("X-axis: ", definitions[Factor_vec[i]], ""))
widget_list[[1]]
widget_list[[2]]
definitions <- append(definitions, list(Sankey = "In the data selection Sankey diagrams, the green labels and columns indicate values considered positive for the metric being measured. The blue labels and columns indicate values that are negative but are still valid and necessary to calculate an overall rate. Red labels and columns indicate values that cause those F2 counts to be excluded, and black labels and columns indicate neutral values that do not affect the metric calculation. If one or more values cause data to be excluded, the streams between columns representing those progeny are coloured red.", F2_Count = "F2 count."))
rm(list = ls())
# ideally we would be able to loop this whole file for all papers
# not sure how to  do that practically without making it unreadable
# slide loops are hard to understand
slide_pub <- c("Carballar-Lejarazú2020", 'Carballar-Lejarazú2023')
library(plotly)
library(data.table)
library(stringr)
library(tidyr)
library(tidyverse)
library(pander)
library(png)
library(ggalluvial)
library(htmltools)
library(cowplot)
library(ggrepel,
include.only = c("geom_label_repel"))
library(grid,
include.only = c("grid.newpage", "grid.draw"))
library(knitr)
# The custom figures are generated from a meta-analysis database we are developing
# From the raw data we attempt to automatically identify what conditions are tested and generate slides to show these
# Set working directory one level higher
cross_summary <- readRDS(str_c("../Processed/", "cross_summary.RDS"))
palette_list <-
as.list(readRDS(str_c("../Processed/", "palette_list.RDS")))
# It is called in the function and needs to be in this relative folder
saveRDS(palette_list, file = str_c("Processed/", "palette_list.RDS"))
cross_summary <- readRDS(str_c("../Processed/", "cross_summary.RDS"))
factor_levels_values <-
readRDS(str_c("../Processed/", "factor_levels_values.RDS"))
saveRDS(factor_levels_values,
file = str_c("Processed/", "factor_levels_values.RDS"))
cross_summary <- readRDS(str_c("../Processed/", "cross_summary.RDS"))
saveRDS(cross_summary, file = str_c("Processed/", "cross_summary.RDS"))
# Here we load in the functions shared with the webtool
source(str_c("../", "functions.R"))
# Here we get the empty data structure from the first publication
cross_data <-
readRDS(str_c("../Processed/", "data_", slide_pub[1], ".RDS"))[0, ]
# Here we append the data for the paper(s) to the empty df
for (p in slide_pub) {
# Set working directory one level higher
cross_data <-
rbind(cross_data, readRDS(str_c("../Processed/", "data_", p, ".RDS")))
}
warning("we removed publication and strain as a pairing factor for this presentation")
cross_matching_selected <- cross_matching_selected[-1]
cross_matching_selected <- cross_matching_selected[!(cross_matching_selected %in% cross_matching[["Strain"]])]
# Here we create a list of variables relevant for generating the graphs
input_df_ref <- list(
Species_Select = levels(factor(cross_data$Species)),
# Here we list all species in the whole data set
Promoter_Select = levels(factor(cross_data$Nuclease.Promoter.5UTR)),
# Here we list all species in the whole data set
F1_focus_Select = levels(factor(cross_data$D1.Zygote.Genotype)),
Publication_Select = levels(factor(cross_data$Publication)),
# DriveExpected_server = "Yes", # Here we specify if the data should exclude control crosses
Exclusion_Select = cross_matching_selected,
metric = "",
# Here we grab the metric the user has chosen on the page
B_server = "",
B_norm_server = "Non-Normalised & All Data",
B_color_server = "Species",
F2_Somatic_Phenotype_Factors = F2_Somatic_Phenotype_Factors,
# Need to check why this is duplicated
F2_Exclusion_Select = F2_Somatic_Phenotype_Factors,
# Need to check why this is duplicated
facet_factor = NA,
Names_List = Names_List,
palette_list = palette_list
)
# Here we make a df that lists the paper screenshots
for (p in slide_pub) {
images <- list.files(str_c("", p))
image_files_df <- data.frame(
"group" = substr(images, 1, 1),
"index" = substr(images, 2, 3),
"titles" = substr(images, 4, 100),
"file" = images
)
image_files_df$titles <- str_sub(image_files_df$titles, end = -5)
image_files_df$file <- str_c(p, "/", image_files_df$file)
if (exists('combined_image_df')) {
combined_image_df <- rbind(combined_image_df, image_files_df)
} else {
combined_image_df <- image_files_df
}
}
create_saved_fig_slide <- function(slide_title, image_file) {
# Inserts "## Title (auto)"
pander::pandoc.header(slide_title, level = 2)
pander::pandoc.p(str_c("![](", image_file, ")", "{fig-align=\"center\"}"))
# a list, formatted as Markdown
# adding also empty lines, to be sure that this is valid Markdown
# pander::pandoc.p('\n')
# pander::pandoc.list(letters[1:3])
# pander::pandoc.p('')
}
# Title figure
df <- combined_image_df[combined_image_df$group == "T",]
if (nrow(df) != 0) {
for (i in 1:nrow(df)) {
create_saved_fig_slide(df[i,"titles"],df[i,"file"])
}}
clarif_text <- "Meta-analysis requests for clarification for"
# Intro figures
df <- combined_image_df[combined_image_df$group == "G",]
if (nrow(df) != 0) {
for (i in 1:nrow(df)) {
create_saved_fig_slide(df[i,"titles"],df[i,"file"])
}}
# Here we list out the metrics
# I should add in the definitions from overleaf
# We indicate if there is data for a particular metric in the paper
cross_summary_urls <- cross_summary
cross_summary_urls$Target.Locus.Sequence.Link <- str_c(
"<a href=\"",
cross_summary_urls$Target.Locus.Sequence.Link,
"\">",
cross_summary_urls$D.Target.Gene,
"</a>"
)
cross_summary_urls$Drive.Inserted.Link <- str_c("<a href=\"",
cross_summary_urls$Drive.Inserted.Link,
"\">Drive",
"</a>")
cross_summary_urls$Drive.Target.Alignment.Link <- str_c(
"<a href=\"",
cross_summary_urls$Drive.Target.Alignment.Link,
"\">Drive:Target",
"</a>"
)
drive_design_table <-
cross_summary_urls[cross_summary_urls$Publication %in% slide_pub, ]
drive_design_factors <- list(
# 'Publication' = "Papers this element appears in",
'Misc.Factor' = "Misc feature",
'Target.Locus.Sequence.Link' = "Target locus",
'Drive.Inserted.Link' = "Drive",
'Drive.Target.Alignment.Link' = "Drive:Target aligned (these Benchling links have issues)",
'Drive.Allele.Size' = "Drive allele size",
"D.gRNA.Promoter" = "gRNA promoter(s)",
"D.gRNA.Target.Sequence" = "gRNA target seq",
"D.gRNA.Scaffold" = "gRNA scaffold",
"nonAlignment.5.Seq" = "non aligning 5\' seq",
"nonAlignment.3.Seq" = "non aligning 3\' seq",
"PAM.Orientation" = "gRNA PAM orientation"
)
drive_design_table <-
drive_design_table[!duplicated(drive_design_table[, names(drive_design_factors)]), names(drive_design_factors)]
drive_design_table$Publication <- ""
for (i in 1:nrow(drive_design_table)) {
df <- cross_summary_urls
for (q in names(drive_design_factors)) {
df <- df[drive_design_table[i, q] == df[, q], ]
}
drive_design_table[i, ]$Publication <-
paste(unique(df$Publication), collapse = " | ")
}
drive_design_table <-
drive_design_table[, c(which(colnames(drive_design_table) == "Publication"),
which(colnames(drive_design_table) != "Publication"))]
drive_design_factors <- append(drive_design_factors,
list('Publication' = "Papers this element appears in"))
names(drive_design_table) <-
unlist(drive_design_factors[names(drive_design_table)])
pander::pandoc.table(drive_design_table, split.table = Inf)
# Here we list out the metrics
# I should add in the definitions from overleaf
# We indicate if there is data for a particular metric in the paper
cross_summary_urls <- cross_summary
cross_summary_urls$nuc_comb_CDS <- str_c(
cross_summary_urls$Nuclease.Promoter.5UTR,
"_",
cross_summary_urls$Nuclease.CDS,
"_",
cross_summary_urls$Nuclease.3UTR
)
cross_summary_urls$Nuclease.Inserted.Link <- str_c(
"<a href=\"",
cross_summary_urls$Nuclease.Inserted.Link,
"\">",
cross_summary_urls$nuc_comb_CDS,
"</a>"
)
drive_design_table <-
cross_summary_urls[cross_summary_urls$Publication %in% slide_pub, ]
drive_design_factors <- list(
'Misc.Factor' = "Misc feature",
'Nuclease.Insertion.Variant' = "Nuclease insertion index/locus",
'Nuclease.Inserted.Link' = "Nuclease carrying element",
'Nuclease.Promoter.5UTR.Size' = "Promoter + 5UTR size (bp)",
'Nuclease.Codon.Optimisation' = "Nuclease codon opt",
'Nuclease.3UTR.Size' = "3 UTR size (bp)"
)
drive_design_table <-
drive_design_table[!duplicated(drive_design_table[, names(drive_design_factors)]), names(drive_design_factors)]
drive_design_table$Publication <- ""
for (i in 1:nrow(drive_design_table)) {
df <- cross_summary_urls
for (q in names(drive_design_factors)) {
df <- df[drive_design_table[i, q] == df[, q], ]
}
drive_design_table[i, ]$Publication <-
paste(unique(df$Publication), collapse = " | ")
}
drive_design_table <-
drive_design_table[, c(which(colnames(drive_design_table) == "Publication"),
which(colnames(drive_design_table) != "Publication"))]
drive_design_factors <- append(drive_design_factors,
list('Publication' = "Papers this element appears in"))
names(drive_design_table) <-
unlist(drive_design_factors[names(drive_design_table)])
pander::pandoc.table(drive_design_table, split.table = Inf)
# Construct(gene) overview figure
df <- combined_image_df[combined_image_df$group == "I",]
if (nrow(df) != 0) {
for (i in 1:nrow(df)) {
create_saved_fig_slide(df[i,"titles"],df[i,"file"])
}
}
# Here we list out the metrics
# I should add in the definitions from overleaf
# We indicate if there is data for a particular metric in the paper
definitions <-
as.list(readRDS(str_c("../Processed/", "definitions.RDS")))
factors_table <- data.frame(
Metric = names(factor_levels_values),
Description = as.character(definitions[names(factor_levels_values)]),
Values.in.paper = names(factor_levels_values)
)
for (i in factors_table[, 'Metric']) {
factors_table$Values.in.paper[factors_table$Metric == i] <-
paste(unique(cross_data[, i]), collapse = "<br>")
if (length(unique(cross_data[, i])) > 1) {
factors_table$Values.in.paper[factors_table$Metric == i] <-
str_c(
"<font color=",
'"',
"color:green",
'"',
">",
factors_table$Values.in.paper[factors_table$Metric == i],
"</font>"
)
}
}
factors_table$Metric <- as.character(unlist(Names_List[factors_table$Metric]))
# Here we list out 'pairing' factors
# We indicate what levels are recorded for these factors
# We also highlight if the factor levels are unique
pander::pandoc.table(factors_table, split.table = Inf, split.cells =  c(25,50,10))
# need to make a separate one for the somatic phenotype stuff
definitions <-
as.list(readRDS(str_c("../Processed/", "definitions.RDS")))
factors_table <- data.frame(
Metric = c(names(cross_matching[cross_matching_selected]), F2_Somatic_Phenotype_Factors),
Description = as.character(definitions[c(names(cross_matching[cross_matching_selected]), F2_Somatic_Phenotype_Factors)]),
Levels = c(names(cross_matching[cross_matching_selected]), F2_Somatic_Phenotype_Factors)
)
for (i in factors_table[, 'Metric']) {
factors_table$Levels[factors_table$Metric == i] <-
paste(unique(cross_data[, i]), collapse = "<br>")
if (length(unique(cross_data[, i])) > 1) {
factors_table$Levels[factors_table$Metric == i] <-
str_c("<font color=",
'"',
"color:green",
'"',
">",
factors_table$Levels[factors_table$Metric == i],
"</font>")
}
}
# Here we list out 'pairing' factors
# We indicate what levels are recorded for these factors
# We also highlight if the factor levels are unique
pander::pandoc.table(factors_table, split.table = Inf, split.cells =  c(10,100,25))
definitions <- append(definitions, list(Sankey = "In the data selection Sankey diagrams, the green labels and columns indicate values considered positive for the metric being measured. The blue labels and columns indicate values that are negative but are still valid and necessary to calculate an overall rate. Red labels and columns indicate values that cause those F2 counts to be excluded, and black labels and columns indicate neutral values that do not affect the metric calculation. If one or more values cause data to be excluded, the streams between columns representing those progeny are coloured red.", F2_Count = "F2 count."))
### loop over the metrics, and factors
### then produce figures for each
widget_list <- list()
Title_vec <- character()
Metric_vec <- character()
Factor_vec <- character()
for (metric in names(factor_levels_values)) {
if (length(unique(cross_data[, metric])) > 1) {
#& metric != "Drive_Allele_Inheritance_With_Controls") {
# Here we copy the references values before we change them
input_df <- input_df_ref
# If the metric is somatic phenotype, we modify the factors
if (metric == "Nuclease_Induced_Phenotype") {
factor_list_custom <- c("ID",
"Cross",
F2_Somatic_Phenotype_Factors,
names(cross_matching[cross_matching_selected]))
factor_list_custom <-
factor_list_custom[!(factor_list_custom %in% "D1.Sex")]
} else {
factor_list_custom <- c("ID", "Cross",
names(cross_matching[cross_matching_selected]))
}
for (factor in factor_list_custom) {
if (length(unique(cross_data[cross_data[, metric] != "Null", factor])) > 1) {
Factor_vec <- c(Factor_vec, factor)
Metric_vec <- c(Metric_vec, metric)
# Y axis metric
input_df$metric <- metric
# X axis metric
input_df$B_server <- factor
Figure_List <- Comparison_Function(
cross_data,
cross_matching,
input_df,
"Interactive",
List,
factor_levels_values
)
Figure_List$Plot <- Figure_List$Plot %>%
layout(
autosize = T,
width = 16 * 65,
height = 10 * 55,
paper_bgcolor = "lightblue",
xaxis = list(
tickfont = list(size = 15),
titlefont = list(size = 20)
),
yaxis = list(
tickfont = list(size = 15),
titlefont = list(size = 20)
)
)
if (factor == factor_list_custom[1]) {
widget_list[[length(widget_list) + 1]] <- Figure_List$Sankey
Title_vec <- c(Title_vec, str_c(metric, " inclusion criteria"))
Factor_vec <- c(Factor_vec, "Sankey")
Metric_vec <- c(Metric_vec, "F2_Count")
}
widget_list[[length(widget_list) + 1]] <- htmltools::div(htmltools::tagList(Figure_List$Plot), style = "height: 575px", fig.align='center')
Title_vec <- c(Title_vec, str_c(metric, ":", factor))
}
}
}
}
# htmltools::tagList(widget_list)
# This is stupidly verbose, but...
# Spent too many hours trying to make this work in a loop
# It just wont...
# same for if statements
# this is so annoying and illogical
i <- 1
widgets_numb <- length(widget_list)
# Change the tiles to the long text version
# maybe add the definitions of the metric and factor at the bottom of the graphs
# add a caption about the lines being drawn
# add the Sankey plots in between the different factors (probably quite hard)
Line_meaning <- "Lines are drawn between paired crosses that are identical for the other essential factors, apart from the respective X-axis factor."
Factor_vec
pander::pandoc.header(Title_vec[i], level = 2)
widget_list[[i]]
pander::pandoc.p(str_c("X-axis: ", definitions[Factor_vec[i]], ""))
pander::pandoc.p(str_c("Y-axis: ", definitions[Metric_vec[i]], ""))
if (Factor_vec[i] != "F2_Count") {
pander::pandoc.p(str_c("O-O: ", Line_meaning, ""))
}
i <- i + 1
Factor_vec[i]
shiny::runApp('C:/Users/Desctop/Dropbox/DPhil/Projects/Meta-analysis-HEG/GeneDrive')
runApp('C:/Users/Desctop/Dropbox/DPhil/Projects/Meta-analysis-HEG/GeneDrive')
